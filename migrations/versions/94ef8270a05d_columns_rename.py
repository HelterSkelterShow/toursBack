"""columns rename

Revision ID: 94ef8270a05d
Revises: 61cf704733f0
Create Date: 2024-02-13 23:44:39.810314

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '94ef8270a05d'
down_revision: Union[str, None] = '61cf704733f0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tour_offer', sa.Column('tourPlanId', sa.UUID(), nullable=True))
    op.add_column('tour_offer', sa.Column('touristId', sa.Integer(), nullable=True))
    op.add_column('tour_offer', sa.Column('bookingTime', sa.TIMESTAMP(), nullable=True))
    op.add_column('tour_offer', sa.Column('touristsAmount', sa.Integer(), nullable=False))
    op.add_column('tour_offer', sa.Column('paymentState', sa.Boolean(), nullable=False))
    op.drop_constraint('tour_offer_tour_plan_id_fkey', 'tour_offer', type_='foreignkey')
    op.drop_constraint('tour_offer_tourist_id_fkey', 'tour_offer', type_='foreignkey')
    op.create_foreign_key(None, 'tour_offer', 'user', ['touristId'], ['id'])
    op.create_foreign_key(None, 'tour_offer', 'tour_plan', ['tourPlanId'], ['id'])
    op.drop_column('tour_offer', 'tourist_id')
    op.drop_column('tour_offer', 'tourists_amount')
    op.drop_column('tour_offer', 'payment_state')
    op.drop_column('tour_offer', 'tour_plan_id')
    op.drop_column('tour_offer', 'booking_time')
    op.add_column('tour_plan', sa.Column('schemaId', sa.UUID(), nullable=True))
    op.add_column('tour_plan', sa.Column('dateFrom', sa.TIMESTAMP(), nullable=False))
    op.add_column('tour_plan', sa.Column('dateTo', sa.TIMESTAMP(), nullable=False))
    op.add_column('tour_plan', sa.Column('meetingPoint', sa.String(), nullable=False))
    op.add_column('tour_plan', sa.Column('meetingDatetime', sa.TIMESTAMP(), nullable=False))
    op.add_column('tour_plan', sa.Column('maxPersonNumber', sa.Integer(), nullable=False))
    op.drop_constraint('tour_plan_schema_id_fkey', 'tour_plan', type_='foreignkey')
    op.create_foreign_key(None, 'tour_plan', 'tour_schema', ['schemaId'], ['id'])
    op.drop_column('tour_plan', 'meeting_point')
    op.drop_column('tour_plan', 'meeting_datetime')
    op.drop_column('tour_plan', 'schema_id')
    op.drop_column('tour_plan', 'date_from')
    op.drop_column('tour_plan', 'date_to')
    op.drop_column('tour_plan', 'max_person')
    op.add_column('tour_schema', sa.Column('ownerGidId', sa.Integer(), nullable=True))
    op.add_column('tour_schema', sa.Column('tourName', sa.String(), nullable=False))
    op.add_column('tour_schema', sa.Column('mapPoints', sa.JSON(), nullable=False))
    op.add_column('tour_schema', sa.Column('tourDescription', sa.String(), nullable=False))
    op.add_column('tour_schema', sa.Column('freeServices', sa.JSON(), nullable=True))
    op.add_column('tour_schema', sa.Column('additionalServices', sa.JSON(), nullable=True))
    op.add_column('tour_schema', sa.Column('recommendedAgeFrom', sa.Integer(), nullable=False))
    op.add_column('tour_schema', sa.Column('recommendedAgeTo', sa.Integer(), nullable=False))
    op.drop_constraint('tour_schema_owner_gid_id_fkey', 'tour_schema', type_='foreignkey')
    op.create_foreign_key(None, 'tour_schema', 'user', ['ownerGidId'], ['id'])
    op.drop_column('tour_schema', 'recommended_age_to')
    op.drop_column('tour_schema', 'recommended_age_from')
    op.drop_column('tour_schema', 'free_services')
    op.drop_column('tour_schema', 'owner_gid_id')
    op.drop_column('tour_schema', 'tour_description')
    op.drop_column('tour_schema', 'map_points')
    op.drop_column('tour_schema', 'tour_name')
    op.drop_column('tour_schema', 'additional_services')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tour_schema', sa.Column('additional_services', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('tour_schema', sa.Column('tour_name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('tour_schema', sa.Column('map_points', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('tour_schema', sa.Column('tour_description', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('tour_schema', sa.Column('owner_gid_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('tour_schema', sa.Column('free_services', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('tour_schema', sa.Column('recommended_age_from', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tour_schema', sa.Column('recommended_age_to', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'tour_schema', type_='foreignkey')
    op.create_foreign_key('tour_schema_owner_gid_id_fkey', 'tour_schema', 'user', ['owner_gid_id'], ['id'])
    op.drop_column('tour_schema', 'recommendedAgeTo')
    op.drop_column('tour_schema', 'recommendedAgeFrom')
    op.drop_column('tour_schema', 'additionalServices')
    op.drop_column('tour_schema', 'freeServices')
    op.drop_column('tour_schema', 'tourDescription')
    op.drop_column('tour_schema', 'mapPoints')
    op.drop_column('tour_schema', 'tourName')
    op.drop_column('tour_schema', 'ownerGidId')
    op.add_column('tour_plan', sa.Column('max_person', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tour_plan', sa.Column('date_to', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('tour_plan', sa.Column('date_from', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('tour_plan', sa.Column('schema_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('tour_plan', sa.Column('meeting_datetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('tour_plan', sa.Column('meeting_point', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'tour_plan', type_='foreignkey')
    op.create_foreign_key('tour_plan_schema_id_fkey', 'tour_plan', 'tour_schema', ['schema_id'], ['id'])
    op.drop_column('tour_plan', 'maxPersonNumber')
    op.drop_column('tour_plan', 'meetingDatetime')
    op.drop_column('tour_plan', 'meetingPoint')
    op.drop_column('tour_plan', 'dateTo')
    op.drop_column('tour_plan', 'dateFrom')
    op.drop_column('tour_plan', 'schemaId')
    op.add_column('tour_offer', sa.Column('booking_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('tour_offer', sa.Column('tour_plan_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('tour_offer', sa.Column('payment_state', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('tour_offer', sa.Column('tourists_amount', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tour_offer', sa.Column('tourist_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'tour_offer', type_='foreignkey')
    op.drop_constraint(None, 'tour_offer', type_='foreignkey')
    op.create_foreign_key('tour_offer_tourist_id_fkey', 'tour_offer', 'user', ['tourist_id'], ['id'])
    op.create_foreign_key('tour_offer_tour_plan_id_fkey', 'tour_offer', 'tour_plan', ['tour_plan_id'], ['id'])
    op.drop_column('tour_offer', 'paymentState')
    op.drop_column('tour_offer', 'touristsAmount')
    op.drop_column('tour_offer', 'bookingTime')
    op.drop_column('tour_offer', 'touristId')
    op.drop_column('tour_offer', 'tourPlanId')
    # ### end Alembic commands ###
